---
alwaysApply: true
description: Primary Advantage project structure and architecture guide
---

# Primary Advantage - Project Structure & Architecture

Primary Advantage is an AI-powered literacy platform for primary school students built with Next.js 15, featuring multi-language support and role-based access control.

## Core Architecture

- **Framework**: Next.js 15 with App Router
- **Database**: PostgreSQL with Prisma ORM
- **Authentication**: NextAuth.js v5 with Google OAuth and custom credentials
- **UI Framework**: React 19 with Radix UI components and Tailwind CSS v4
- **Internationalization**: next-intl with 5 supported locales (en, th, vi, cn, tw)
- **AI Integration**: Multiple AI providers (OpenAI, Google AI, Google Vertex)
- **Deployment**: Google Cloud Platform with Docker containerization

## Directory Structure

### Core Application Structure

- `app/[locale]/` - Internationalized App Router pages
  - `(index)/` - Public pages (about, contact, authors)
  - `(student)/` - Student dashboard and activities
  - `student/` - Student-specific features (read, vocabulary, sentences)
  - `admin/` - School admin features
  - `teacher/` - Teacher dashboard and classroom management
  - `system/` - System administrator features
  - `auth/` - Authentication pages
  - `api/` - API routes organized by feature

### Supporting Directories

- `components/` - Reusable UI components organized by feature
- `server/` - Backend logic (controllers, models, utils)
- `lib/` - Shared utilities and configurations
- `prisma/` - Database schema and migrations
- `types/` - TypeScript type definitions
- `i18n/` - Internationalization configuration
- `messages/` - Translation files for all supported locales
- `data/` - Static data, prompts, and temporary files

## User Roles & Access Control

The platform supports multiple user roles with specific access patterns:

- **STUDENT**: Reading activities, flashcards, progress tracking
- **TEACHER**: Classroom management, student progress, reports
- **ADMIN**: School administration, user management
- **SYSTEM**: Platform-wide administration, schools, licenses

## Key Features

- **AI-Generated Content**: Articles, questions, and flashcards
- **Multi-language Support**: Full i18n with 5 locales
- **Classroom Management**: Teacher-student relationships, class codes
- **Progress Tracking**: XP system, CEFR levels, activity logging
- **Flashcard System**: Spaced repetition using ts-fsrs algorithm
- **Audio Integration**: Text-to-speech and audio playback
- **School Licensing**: Multi-tenant architecture with school-based access

## Development Guidelines

- Use the established folder structure for new features
- Follow role-based access patterns for new routes
- Maintain internationalization for all user-facing content
- Use Prisma for all database operations
- Follow the component organization patterns in `components/`
- Use server actions and API routes appropriately
