generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(cuid())
  name              String?
  email             String?             @unique
  emailVerified     DateTime?           @map("email_verified")
  image             String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  password          String?
  cefrLevel         String?             @default("A1-")
  level             Int                 @default(1)
  xp                Int                 @default(0)
  roles             UserRole[]
  accounts          Account[]
  studentClassroom  ClassroomStudent[]
  FlashcardDeck     FlashcardDeck[]
  sessions          Session[]
  UserActiclity     UserActivity[]
  XpLogs            XPLogs[]
  SchoolAdmins      SchoolAdmins[]
  ClassroomTeachers ClassroomTeachers[]

  schoolId String? @map("school_id")
  School   School? @relation(fields: [schoolId], references: [id])

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model UserRole {
  id     String @id @default(cuid())
  userId String
  roleId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

model Role {
  id   String @id @default(cuid())
  name String

  users UserRole[]

  @@map("roles")
}

model XPLogs {
  id           String         @id @default(cuid())
  userId       String         @map("user_id")
  xpEarned     Int
  activityId   String?
  activityType ActivityType
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  UserActivity UserActivity[] @relation("UserActivityToXPLogs")

  @@map("xp_logs")
}

model UserActivity {
  id           String       @id @default(cuid())
  userId       String       @map("user_id")
  activityType ActivityType
  targetId     String?
  timer        Int?
  details      Json?
  completed    Boolean      @default(false)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  xpLogs       XPLogs[]     @relation("UserActivityToXPLogs")

  @@index([userId, activityType, targetId])
  @@map("user_activities")
}

model Article {
  id                      String                   @id @default(cuid())
  type                    String
  genre                   String
  subGenre                String                   @map("sub_genre")
  topic                   String?                  
  title                   String
  summary                 String
  passage                 String
  imageDescription        String                   @map("image_description")
  brainstorming           String?                  @map("brainstorming")
  planning                String?                  @map("planning")
  cefrLevel               String                   @map("cefr_level")
  raLevel                 Int                      @map("ra_level")
  rating                  Float
  audioUrl                String?                  @map("audio_url")
  audioWordUrl            String?                  @map("audio_word_url")
  sentences               Json?
  words                   Json?
  authorId                String?                  @map("author_id")
  createdAt               DateTime                 @default(now()) @map("created_at")
  updatedAt               DateTime                 @updatedAt @map("updated_at")
  translatedPassage       Json?                    @map("translated_passage")
  translatedSummary       Json?                    @map("translated_summary")
  isDraft                 Boolean                  @default(false) @map("is_draft")
  isPublished             Boolean                  @default(false) @map("is_published")
  isApproved              Boolean                  @default(false) @map("is_approved")
  longAnswerQuestions     LongAnswerQuestion[]
  multipleChoiceQuestions MultipleChoiceQuestion[]
  shortAnswerQuestions    ShortAnswerQuestion[]

  @@map("article")
}

model MultipleChoiceQuestion {
  id              String   @id @default(cuid())
  question        String
  options         String[]
  answer          String
  textualEvidence String?
  articleId       String   @map("article_id")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  article         Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@map("multiple_choice_questions")
}

model ShortAnswerQuestion {
  id        String   @id @default(cuid())
  question  String
  answer    String
  articleId String   @map("article_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@map("short_answer_questions")
}

model LongAnswerQuestion {
  id        String   @id @default(cuid())
  question  String
  articleId String   @map("article_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@map("long_answer_questions")
}

model FlashcardDeck {
  id          String          @id @default(cuid())
  userId      String          @map("user_id")
  name        String?
  type        FlashcardType
  description String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  cards       FlashcardCard[]
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("flashcard_decks")
}

model FlashcardCard {
  id            String        @id @default(cuid())
  deckId        String        @map("deck_id")
  type          FlashcardType
  articleId     String?       @map("article_id")
  audioUrl      String?       @map("audio_url")
  startTime     Float?        @map("start_time")
  endTime       Float?        @map("end_time")
  word          String?
  definition    Json?
  sentence      String?
  translation   Json?
  context       String?
  due           DateTime      @default(now())
  stability     Float         @default(0.0)
  difficulty    Float         @default(0.0)
  elapsedDays   Int           @default(0) @map("elapsed_days")
  scheduledDays Int           @default(0) @map("scheduled_days")
  learningSteps Int           @default(0) @map("learning_steps")
  reps          Int           @default(0)
  lapses        Int           @default(0)
  state         CardState     @default(NEW)
  lastReview    DateTime?     @map("last_review")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  reviews       CardReview[]
  deck          FlashcardDeck @relation(fields: [deckId], references: [id], onDelete: Cascade)

  @@map("flashcard_cards")
}

model CardReview {
  id         String        @id @default(cuid())
  cardId     String        @map("card_id")
  rating     Int
  timeSpent  Int?          @map("time_spent")
  reviewedAt DateTime      @default(now())
  card       FlashcardCard @relation(fields: [cardId], references: [id], onDelete: Cascade)

  @@map("card_reviews")
}

// enum Role {
//   USER
//   STUDENT
//   TEACHER
//   ADMIN
//   SYSTEM
// }

enum ActivityType {
  ARTICLE_RATING
  ARTICLE_READ
  STORIES_RATING
  STORIES_READ
  CHAPTER_RATING
  CHAPTER_READ
  LEVEL_TEST
  MC_QUESTION
  SA_QUESTION
  LA_QUESTION
  SENTENCE_FLASHCARDS
  SENTENCE_MATCHING
  SENTENCE_ORDERING
  SENTENCE_WORD_ORDERING
  SENTENCE_CLOZE_TEST
  VOCABULARY_FLASHCARDS
  VOCABULARY_MATCHING
}

enum FlashcardType {
  VOCABULARY
  SENTENCE
}

enum CardState {
  NEW
  LEARNING
  REVIEW
  RELEARNING
}

model Classroom {
  id               String    @id @default(cuid())
  name             String
  grade            String?
  classCode        String?   @unique
  passwordStudents String?   @map("password_students")
  codeExpiresAt    DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  schoolId String? @map("school_id")
  school   School? @relation(fields: [schoolId], references: [id])

  students ClassroomStudent[]
  teachers ClassroomTeachers[]

  @@map("classrooms")
}

model ClassroomStudent {
  id          String @id @default(cuid())
  studentId   String
  classroomId String

  classroom Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  student   User      @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([classroomId, studentId])
  @@map("classroom_students")
}

model School {
  id String @id @default(cuid())

  name         String
  contactName  String?  @map("contact_name")
  contactEmail String?  @map("contact_email")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  ownerId      String?  @map("owner_id")

  users      User[]
  admins     SchoolAdmins[]
  classrooms Classroom[]

  licenseId String?  @unique @map("license_id")
  license   License? @relation(fields: [licenseId], references: [id], onDelete: Cascade)

  @@map("schools")
}

model License {
  id          String    @id @default(cuid())
  key         String    @unique
  name        String
  description String?
  maxUsers    Int       @map("max_users")
  startDate   DateTime  @map("start_date")
  expiryDate  DateTime?
  expiryDays  Int?      @map("expiry_days")
  status      String    @default("active")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  School School?

  @@map("licenses")
}

model SchoolAdmins {
  id        String   @id @default(cuid())
  schoolId  String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  school School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("school_admins")
}

model ClassroomTeachers {
  id          String   @id @default(cuid())
  classroomId String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  classroom Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("classroom_teachers")
}
